# -*- coding: utf-8 -*-
"""Prachi_data_cleaning_with_pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JCxJv1-kY_oELyGq2mAt5nA8fzWZVFZ4

# Data Cleaning with Pandas

In this notebook we'll go through a few basic data cleaning steps that should be performed on all new datasets where necessary.

We'll go through the process with both the `orders` and `orderlines` datasets. You can then practice these skills by cleaning the `products` dataset yourself
"""

import pandas as pd

# orders.csv
url = "https://drive.google.com/file/d/1Vu0q91qZw6lqhIqbjoXYvYAQTmVHh6uZ/view?usp=sharing" 
path = "https://drive.google.com/uc?export=download&id="+url.split("/")[-2]
orders = pd.read_csv(path)

# orderlines.csv
url = "https://drive.google.com/file/d/1FYhN_2AzTBFuWcfHaRuKcuCE6CWXsWtG/view?usp=sharing" 
path = "https://drive.google.com/uc?export=download&id="+url.split("/")[-2]
orderlines = pd.read_csv(path)
orderlines

"""One of the best ways to begin data cleaning is by exploring using `.info()`. This will tell us:
* The shape of the DataFrame
* The names of the columns
* If there are any missing values
* The datatypes of the columns

By exploring the missing values and correcting any incorrect datatypes, we often come across inconsistencies in our data.

Beyond this, we should also have a **check for any duplicate rows**. 

Let's first deal with the duplicates, as it's nice and easy, then we'll explore what `.info()` has to tell us.

## 1.&nbsp; Duplicates
We can check for duplicates using the pandas [.duplicated()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.duplicated.html) method. 

We can then delete these rows, if we wish, using [.drop_duplicates()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.drop_duplicates.html)
"""

# orders
orders.duplicated().sum()

# orderlines
orderlines.duplicated().sum()

"""We have no duplicate rows in either DataFrame. Easy, there is no problem to solve. Normally though, if there were some duplicates, we'd drop the extra rows.

# 2.&nbsp; `.info()`
"""

orders.info()

"""* `total_paid` has 5 missing values
* `created_date` should become datetime datatype
"""

orderlines.info()

"""* `date` should be a datetime datatype
* `unit_price` should be a float datatype

## 3.&nbsp; Missing values

### 3.1.&nbsp; Orders
* `total_paid` has 5 missing values
"""

print(f"5 missing values represents {((orders.total_paid.isna().sum() / orders.shape[0])*100).round(5)}% of the rows in our DataFrame")

"""As there is such a tiny amount of missing values, we will simply delete these rows, as we have enough data without them."""

orders = orders.loc[~orders.total_paid.isna(), :]
orders.info()

"""Should you have a significant number of missing values in the future, you have a choice: 
+ you can impute the values
+ you can take the values from other DataFrames, if they are present there
+ you can delete the values
+ or any number of other creative solutions

Please, always consider how much time you have on your project, and what impact your method of choice will have on your final assesment.

### 3.2.&nbsp; Orderlines
There are no missing values in `orderlines`

## 4.&nbsp; Datatypes

### 4.1.&nbsp; Orders
* `created_date` should become datetime datatype
"""

orders["created_date"] = pd.to_datetime(orders["created_date"])
orders

"""### 4.1.&nbsp; Orderlines
* `date` should be a datetime datatype
* `unit_price` should be a float datatype

#### 4.1.1.&nbsp; `date`
"""

orderlines["date"] = pd.to_datetime(orderlines["date"])
orderlines

"""#### 4.1.2.&nbsp;`unit_price`"""

orderlines["unit_price"] = pd.to_numeric(orderlines["unit_price"])

"""As you can see when we try to convert `unit_price` to a numerical datatype, we receive a `ValueError` telling us that pandas doesn't understand the number `1.137.99`. This is probably because numbers cannot have 2 decimal points. Let's see if there are any other numbers like this."""

orderlines.unit_price.astype(str).str.contains("\d+\.\d+\.\d+").value_counts()

"""Looks like over 36000 rows in `orderlines` are affected by this problem. Let's work out how much that is as a percentage of our total data."""

two_dot_percentage = ((orderlines.unit_price.astype(str).str.contains("\d+\.\d+\.\d+").value_counts()[1] / orderlines.shape[0])*100).round(2)
print(f"The 2 dot problem represents {two_dot_percentage}% of the rows in our DataFrame")

"""This is a bit of a tricky decision as 12.3% is a significant amount of our data... and we might even end up losing a larger portion of our data than this too. For the moment we will delete the rows as we only have 2 weeks for this project and I'd like some quick, accurate results to show. If we have time at the end, we can come back and investigate this problem further, maybe there's a solution?

Each row of `orderlines` represents a product in an order. For example, if order number 175 contained 3 seperate products, then order 175 would have 3 rows in `orderlines`, one row for each of the products. If 2 of those products have 'normal' prices (14.99, 15.85) and 1 has a price with 2 decimal points (1.137.99), we need to remove the whole order and not just the affected row. If we only remove the row with 2 decimal places then any later analysis about products and prices could be misleading.

We therefore need to find the order numbers associated with the rows that have 2 decimal points, and then remove all the associated rows.
"""

two_dot_order_ids_list = orderlines.loc[orderlines.unit_price.astype(str).str.contains("\d+\.\d+\.\d+"), "id_order"]
orderlines = orderlines.loc[~orderlines.id_order.isin(two_dot_order_ids_list)]

orderlines.shape[0]

"""We still have 216250 rows in orderlines to work with. This should be more than enough for our evaluation.

Now that all of the 2 decimal point prices have been removed, let's try again to convert the column `unit_price` to the correct datatype.
"""

orderlines["unit_price"] = pd.to_numeric(orderlines["unit_price"])
orderlines

"""It worked perfectly

# Challenge: Clean the `products` DataFrame
Now it's your turn. Use the lessons you learnt above and clean the products DataFrame. You don't have to copy exactly what we did. Think about the consequences of your actions, sometimes it is ok to delete rows, other times you may wish to come up with more creative solutions.
"""

# products.csv
url = "https://drive.google.com/file/d/1afxwDXfl-7cQ_qLwyDitfcCx3u7WMvkU/view?usp=sharing" 
path = "https://drive.google.com/uc?export=download&id="+url.split("/")[-2]
products = pd.read_csv(path)

products.info() # Total No of rows and columns are (19326 rows, 7 Columns)

"""### Look for Duplicates"""

products.duplicated().sum() #Counts of duplicated rows in products table 
#Duplicated rows are 8746

products[products.duplicated()] # list of duplicated dta entries in peolpe table

products_DC=products.drop_duplicates(subset=['sku']) # Removal of duplicated rows comparing with 'sku' column while it is primary key for products table
products_DC # output after removing duplicated data is (10579 rows × 7 columns)

"""### Look for Missing values

"""

products_DC.price.isna().sum() #No. of missing value row count for price column

products_DC.type.isna().sum()

products.loc[products.price.isna(), :] # List of above missing values

#products_DC = products_DC.loc[~products.price.isna(), :] #removing rows from products table for which price is null
#products_DC = products_DC.loc[~products.desc.isna(), :] # Will check later is any business question is related with this field
#products_DC = products_DC.loc[~products.type.isna(), :] # Will check later is any business question is related with this field
products_DC.info() # Output after removing missing price values in products table (Rows-10534  column 7)

"""### Check / Change Data types"""

products_DC["price"] = pd.to_numeric(products_DC["price"]) # price column contains 1.639.792 value

products_DC.price.astype(str).str.contains("\d+\.\d+\.\d+").value_counts() # Calculate how many columns are affected with two dots values -377

two_dot_percentage = ((products_DC.price.astype(str).str.contains("\d+\.\d+\.\d+").value_counts()[1] / products_DC.shape[0])*100).round(2) # total percentage of overall data-3.58%
two_dot_percentage

two_dot_sku_list =products_DC.loc[products_DC.price.astype(str).str.contains("\d+\.\d+\.\d+"), "sku"]
products_DC = products_DC.loc[~products_DC.sku.isin(two_dot_sku_list)] # removal of dwo dotted price values from products table
products_DC.shape[0] #Total no. of available rowas after removal are 10110

products_DC["price"] = pd.to_numeric(products_DC["price"]) # Change the datatype of rest price values from object to float
products_DC.info() # price column Data type has been changed to float

promo_price_number = products_DC.loc[(products_DC.promo_price.astype(str).str.contains("\d+\.\d+\.\d+"))|(products_DC.promo_price.astype(str).str.contains("\d+\.\d{3,}")), :].shape[0]
promo_price_number # No. of rows affected by weird pattern in promo price column

print(f"The column promo_price has in total {promo_price_number} wrong values. This is {round(((promo_price_number / products_DC.shape[0]) * 100), 2)}% of the rows of the DataFrame")

products_DC = products_DC.drop(columns=["promo_price"]) # solution may be we can just drop the promo_price from our dataframe
products_DC # Output after cleaning the data we have 10157 rows × 6 columns

from google.colab import files #cleaned version of products table

products_DC.to_csv("products_DC.csv", index=False)
files.download("products_DC.csv")