# -*- coding: utf-8 -*-
"""Prachi_Excercise_challenges.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-rMxc95uIFGGqpbEoX5WbTvqJ0WP0MZL

# Pandas challenges
You may have noticed that all the way along we've been giving you links to documentation to explore the attributes, functions, and methods further. This is an important part of coding: nobody has everything memorised, but we are all experts at Googling the information we need quickly.
 
In this notebook we've included a couple of challenges that require methods we haven't taught you - this is a purposeful move to start your path to Google glory. Search around, read pandas docs, stack overflow, medium, and anywhere else you find information. 
 
If you're totally stuck feel free to ask your "colleagues" (fellow students), your instructor, or one of our junior instructors. Most of the time though, we'll have taught you the answer in one of the previous notebooks, please check back in them too. They will be a great source of information throughout this bootcamp.
"""

import pandas as pd

"""###### **Exercise 1:**
read the `vehicles.csv` dataframe and store it in a variable called `cars`:
"""

# vehicles.csv 'https://drive.google.com/file/d/18zYGrzRhn_mz1HJLXxSO_MwR0_nWBS3K/view?usp=sharing'

# your code here
#cars = pd.read_csv('https://drive.google.com/file/d/18zYGrzRhn_mz1HJLXxSO_MwR0_nWBS3K/view?usp=sharing')
url = 'https://drive.google.com/file/d/18zYGrzRhn_mz1HJLXxSO_MwR0_nWBS3K/view?usp=sharing' # vehicles.csv
path = 'https://drive.google.com/uc?export=download&id='+url.split('/')[-2]
cars = pd.read_csv(path)

path

"""###### **Exercise 2:**
how many rows and columns are there?
"""

# your code here
cars = pd.DataFrame(cars)
cars

cars.shape

"""###### **Exercise 3:**
what are the data types of the columns? Are there missing values?
"""

# your code here
cars.info()

cars.isnull().sum()

cars.dtypes

"""###### **Exercise 4:**
what are the ranges / distributions of the numerical columns?
"""

# your code here
cars.describe()

cars.columns

cars.hist(figsize=(12,10));

"""###### **Exercise 5:**
what are the value counts of the `Fuel Type` column?
"""

# your code here
#cars.groupby("Fuel Type").count()
cars.value_counts("Fuel Type")

cars["Fuel_Type"].value_counts()

"""###### **Exercise 6:**
drop the column "Combined MPG"
"""

# your code here
cars.drop("Combined MPG",axis=1)

cars.info()

"""###### **Exercise 7:**
change the column names so that there are no names with spaces or weird special characters:
"""

# your code here
cars.rename({'Engine Displacement': 'engine_displacement','Vehicle Class': 'vehicle_class','Fuel Type':'fuel_type',
                       'Fuel Barrels/Year':'fuel_barrels_year','City MPG':'city_mpg','Highway MPG':'highway_mpg','CO2 Emission Grams/Mile':'co2_emission_grams_mile',
                       'Fuel Cost/Year':'fuel_cost_year'}, axis=1)

import re
col_names = list(cars.columns)
for i in range(len(col_names)):
    col_names[i] = col_names[i].replace(' ', '_')
    col_names[i] = re.sub('[^A-Za-z0-9]+', '_', col_names[i])
cars.columns = col_names
print(cars.info())

cars.columns = cars.columns.str.replace(' ', '_')

cars.columns = cars.columns.str.replace('/', '_')

cars

"""###### **Exercise 8:**
what brand has the most cars?
"""

# your code here
cars.value_counts("Make").head(1)
#cars.value_counts('Make').max()
#cars['Make'].value_counts().max()

cars["Make"].value_counts().head(10)

"""###### **Exercise 9:**
what brand has the worse CO2 Emissions on average?
"""

# your code here
#cars.groupby("CO2 Emission Grams/Mile").mean().head(1)
cars.groupby("Make") ["CO2 Emission Grams/Mile"].mean().sort_values(ascending=False).head(1)

cars.groupby("Make") [['Make','CO2 Emission Grams/Mile']].mean().sort_values(by = 'CO2 Emission Grams/Mile',ascending=False).head(1)

"""###### **Exercise 10:**
did cars consume more gas in the eighties?
"""

# your code here
cars[['Year','Cylinders']].groupby("Year").sum()



cars.groupby("Year")[["City_MPG", "Highway_MPG"]].mean()





"""###### **Exercise 11:**
group cars by fuel type and aggregate them by the following criteria: 

- The maximum number cylinders
- The oldest year
- The average Miles Per Gallon in the city
"""

# your code here
cars.groupby("FuelType").sum().sort_values(['Cylinders'],ascending=False).head(1)
#cars.groupby("Make")['FuelType'].count()['Cylinders'].sum()

cars.groupby(['FuelType']).agg({'Cylinders':['max'], 'Year':['min'], 'CityMPG':['mean']})



"""###### **Exercise 12:**
read the `car_brands.csv` data:
"""

# car_brands.csv 'https://drive.google.com/file/d/1jLSArDeSsySULKiRtMNV3V3RKuWAUKbD/view?usp=sharing'

# your code here
url = 'https://drive.google.com/file/d/1jLSArDeSsySULKiRtMNV3V3RKuWAUKbD/view?usp=sharing'
#car_brands = pd.read_csv('https://drive.google.com/file/d/1jLSArDeSsySULKiRtMNV3V3RKuWAUKbD/')
car_brands = pd.read_csv('https://drive.google.com/uc?export=download&id='+url.split('/')[-2])
car_brands

url = 'https://drive.google.com/file/d/1jLSArDeSsySULKiRtMNV3V3RKuWAUKbD/view?usp=sharing'
path = 'https://drive.google.com/uc?export=download&id='+url.split('/')[-2]
car_brands = pd.read_csv(path)
car_brands

"""###### **Exercise 13:**
join the cars dataframe with the car brands dataframe.
"""

# your code here
cars.merge(car_brands, 
             how="left",
             left_on='Make',right_on='brand'
            )

car_brands = pd.DataFrame(car_brands)
car_brands

"""###### **Bonus:**
create 4 groups (bins) of cars, by Year. We want to explore how cars have evolved decade by decade.
"""

cars

cars["Year_range_q"] = pd.qcut(cars["Year"], 
                             q=4,
                             labels=["80s", "90s", "00s", "10s"])

cars["Year_range"] = pd.cut(cars["Year"], 
                      bins = [1980, 1990, 2000, 2010, 2020], 
                      labels=["80s", "90s", "2000s", "2010s"])

cars.columns

cars["Year_range_q"].hist();

cars["Year_range"].hist();

cars_renamed = cars.rename({'Make':'brand','Engine Displacement': 'engine_displacement','Vehicle Class': 'vehicle_class','Fuel Type':'fuel_type',
                       'Fuel Barrels/Year':'fuel_barrels_year','City MPG':'city_mpg','Highway MPG':'highway_mpg','CO2 Emission Grams/Mile':'co2_emission_grams_mile',
                       'Fuel Cost/Year':'fuel_cost_year'}, axis=1)
cars = pd.DataFrame(cars_renamed)
cars