# -*- coding: utf-8 -*-
"""Prachi_Excercise_pandas-str.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lVhgiZAqkyI3-7o0Svm27CV4pIg-5R8T

Again in this notebook, we will ask you to find some Pandas functions that we haven't yet taught you - this is a purposful move to start your path towards Googling glory. This is an important part of coding: nobody has everything memorised, but we are all experts at Googling the information we need quickly. Search around, read pandas docs, stack overflow, medium, and anywhere else you find information. If you're totally stuck feel free to ask your "colleagues" (fellow students), your instructor, or one of our junior instructors. Most of the time though, we'll have taught you the answer in one of the previous notebooks, please check back in them too, they will be a great source of information throughout this bootcamp.

# Pandas and Text Methods

We will use again the `people` dataframe, with some more people and columns:
"""

import pandas as pd

names = ["Erika Schumacher", "Javi LÃ³pez", "Maria Rovira", "Ana Garamond", 
         "Shekhar Biswas", "Muriel Adams", "Saira Polom", "Alex Edwin", 
         "Kit Ching", "Dog Woof"]
ages = [22, 50, 23, 29, 44, 30, 25, 71, 35, 2]
nations = ["DE", "ES", "ES", "ES", "IN", "DE", "IN", "UK", "UK", "XX"]
sibilings = [2, 0, 4, 1, 1, 2, 3, 7, 0, 9]
colors = ["Red", "Yellow", "Yellow", "Blue", "Red", "Yellow", "Blue", "Blue", "Red", "Gray"]



people = pd.DataFrame({"name":names,
                       "age":ages,
                       "country":nations,
                       "sibilings":sibilings,
                       "favourite_color":colors
                      })

people.head()

people

"""## Filtering data based on conditions

Let's say we want to select only rows for people whose favourite color is "Yellow".

If we just type the condition (`favourite_color=="Yellow"`), we will create a Pandas Series of boolean values of the same length as the rows in the dataframe. It holds `True` for rows where the condition is met, and `False` otherwise:
"""

people.favourite_color=="Yellow"

"""> Note: a Pandas Series is like a list, but it has an index and all of its elements must share the same data type. You can think of it as a "single column dataframe".

We can use this Series inside of the `loc[]` function we learned earlier to select only the rows that corrspond to the `True` values:
"""

people.loc[people.favourite_color=="Yellow"]

people[people['favourite_color']=="Yellow"]

people[people.favourite_color=="Yellow"]

"""###### **Exercise 1:**
filter the `people` dataframe and keep only people from the UK.
"""

people[people.country=="UK"]

"""###### **Exercise 2:** 
filter the `people` dataframe and keep only people from either the UK or Germany (the country code for Germany is "DE"). 

> Tip: To use two conditions inside of `loc[]`, wrap each condition in parentheses and separate them using logical operators
- `&` if you need both conditions to be met
- `|` if meeting one of the conditions is enough
"""

people.loc[(people.country=='UK')|(people.country=='DE')]

"""###### **Exercise 3:**:
filter the `people` dataframe and keep only:

- people from either the UK or Germany (the country code for Germany is "DE"), who have 2 or more siblings
"""

people.loc[((people.country=='UK')|(people.country=='DE'))&(people.sibilings>=2)]

"""## String Operations

The previous exercises could be solved by combining simple conditions based on equalities `==` or comparisons `>`, `<`. But when it comes to text data, sometimes the conditions are more complex. How would we select all the people whose name starts with a certain letter? 

This is where Pandas String Operations are really helpful. Go through [this user guide](https://pandas.pydata.org/docs/user_guide/text.html#string-methods) from Pandas' documentation, it's a good introduction. Here are some examples:

Filtering rows with name starting with A:

- first we generate the boolean expression
"""

# https://pandas.pydata.org/docs/reference/api/pandas.Series.str.startswith.html

people.name.str.startswith("A")

"""- and then pass it to `loc[]`"""

people.loc[people.name.str.startswith("A"),]

"""String methods can also change text:"""

# https://pandas.pydata.org/docs/reference/api/pandas.Series.str.lower.html

people.name.str.lower()

"""Note that we have just outputted these names, but we have not changed the original dataframe:"""

people.head(2)

"""Pandas will not make changes to the original data unless you explicitly tell it to do so. If we wanted to change the original dataframe, we would have assign this output (the names in lower case) to the column in the dataframe we want to change. When doing that, it is important that you select that column using `loc[]`, and not simply `DataFrame.column`:"""

people.loc[:,"name"] = people.name.str.lower()

# now the original dataframe has been modified:
people.head(2)

"""###### **Exercise 4:**
select all people whose name contains (either in the first name or the surname) the letter `p`.
"""

people.loc[people.name.str.contains("p"),]

"""###### **Exercise 5:**
select all people whose full name + surname has more than 12 characters.
"""

people.name.str.len()

people.loc[people.name.str.len()>12]

"""###### **Exercise 6:**
select all people whose surname starts with the letter `e`:
"""

#people.name.str.split(" ").str.get(1)
surname = people.name.str.split(" ").str.get(1)
people.loc[surname.str.startswith("e"),]

people

"""###### **Exercise 7:**
Create a new dataframe, `people_names`, where the first name and the last name are split into two different columns, `first_name` and `last_name`. The first row of the new dataframe should look like this:

`name           	first_name	last_name	age	country 	sibilings	favourite_color`

`erika schumacher	erika    	schumacher	22	DE      	2       	Red`
"""

people

people_names = people.copy()
people_names[['first_name','last_name']] = people_names.name.str.split(" ", expand=True,)
people_names

col_name = ['name','first_name','last_name', 'age', 'country', 'sibilings', 'favourite_color']
people_names.columns = col_name
people_names

"""## Cars challenges

###### **Exercise 8:**
read the `vehicles.csv` and set it to a variable called `cars`. We will use it for some extra challenges.
"""

# vehicles.csv https://drive.google.com/file/d/18zYGrzRhn_mz1HJLXxSO_MwR0_nWBS3K/view?usp=sharing
url = 'https://drive.google.com/file/d/18zYGrzRhn_mz1HJLXxSO_MwR0_nWBS3K/view?usp=sharing'
path = 'https://drive.google.com/uc?export=download&id='+url.split('/')[-2]
cars = pd.read_csv(path)

"""###### **Exercise 9:**
create a column called `Auto` filled with either `True` or `False` depending on whether the transmission is Automatic or not.
"""

cars['Auto'] = cars.Transmission.str.contains('Automatic',case=True)
cars

"""###### **Exercise 10:**
create a column called `Speeds` that contains the number of speeds each transmission has, based on the number that appears in the column `Transmission`. For example, a transmission named "Automatic 4-spd" has 4 speeds, and one named "Auto (AM6)" has 6 speeds. If you find edge cases (e.g. numbers that do not make sense, no number at all...), use your own judgement to assign values to them.

Note: you will most likely need to use something called a "Regular Expression" or "regex" inside of the string method. Regular expressions are sequences of characters designed to match patterns. They can become really complex (to match complex patterns), but for this case, a simple [5 minute tutorial](https://www.youtube.com/watch?v=UQQsYXa1EHs&ab_channel=Kite) or some google should be enough. Whenever you see people writing regex in plain python, remember that you can use any regular expression directly inside of a Pandas `str` method. In the example below, we use the regular expression `"[v-z]"`, which means "match any lowercase letter between v and z (alphabetically)", in combination with the string method `str.contains()`:
"""

people.name.str.contains("[v-z]")

cars.insert(6, "Speeds", cars["Transmission"].str.extract("([1-9])", expand=False))
cars





"""###### **Exercise 11:**
remove non-alphanumeric characters from the "Drivetrain" and the "Make" column
"""

cars.Make.str.replace('[^a-zA-Z]', '')

cars

#cars.Drivetrain.str.replace('[^a-zA-Z]', '')
cars['Drivetrain'].str.replace('\W','')
cars