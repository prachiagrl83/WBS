# -*- coding: utf-8 -*-
"""Prachi_Excercise_lists-sets-tuples.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_9GkCjSz9MAoXYGRuabEaAoDwa9ptE7L

# Lists

As we are to become Data Scientists, we are going to need objects that can store multiple elements. In Python, the list is one of the most useful of these. You can create a list with `[]`, and separate each element with a comma:
"""

# https://www.w3schools.com/python/python_lists.asp

weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]

"""A list can also contain numbers:"""

leap_years = [2000, 2004, 2008, 2012, 2016, 2020]

"""You can create a list out of something else with `list()`:"""

# https://www.w3schools.com/python/ref_func_list.asp

list("WBSCS")

"""You can extract single or multiple values from a list by especifying their index inside of square brackets:"""

weekdays[0]

leap_years[-1]

weekdays[0:3]

"""One of the most useful functions we will use in combination with lists is `append()`: it just adds an element at the end of the list:"""

# https://www.w3schools.com/python/ref_list_append.asp

leap_years.append(2024)
print(leap_years)

"""This is possible because lists, unlike strings or numbers, are mutable: you can change them without having to define them again.

The `insert()` function does the same, but at any specified position:
"""

# https://www.w3schools.com/python/ref_list_insert.asp

leap_years.insert(0, 1996)
print(leap_years)

leap_years.insert(2, "Happy new millenia")
print(leap_years)

"""As you can see, lists support elements from different data types. They're heterogeneous.

There are some other built-in methods that you can use to manipulate lists. Check them out here (https://www.w3schools.com/python/python_lists_methods.asp) and complete the following exercises:
"""

# some lists to work with
car_brands = ["BMW", "Volkswagen", "Mercedes", "Ford", "Apple", "Toyota", 
              "Tesla", "Kia", "Porsche", "Mazda", "Honda", "Jaguar", 
              "Mitsubishi", "Audi", "Bentley", "Bugatti", "Chrisler"]

fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 53, 89, 144]

characters = [["Harry", "Hermoine", "Ron"], 
              ["Daenerys Targaryen", "Jon Snow", "Tyrion Lannister", 
               "Cercei Lannister", "Arya Stark", "Sansa Stark"],
              ["Aragorn", "Gandalf", "Frodo", "Legolas", "Gollum", "Gimli"],
              ["Walter White", "Jesse Pinkman", "Gus Fring"]
             ]

sex_and_the_city = ["Carrie", "Samantha", "Charlotte", "Miranda"]

numbers = [[1, 51, 59, 2, 95, 25, 28, 67, 14, 63, 84, 33, 56, 31, 54, 97, 77, 
            98, 46, 84, 6, 66, 86, 77, 69, 19, 77, 7, 76, 19, 59, 77, 28, 34, 
            94, 4, 45, 95, 41, 66, 5, 38, 35, 57, 84, 38, 94, 65, 45, 80, 83, 
            22, 12, 100, 52, 55, 31, 69, 29, 67, 4, 39, 87, 49, 81, 82, 96, 4, 
            85, 62, 90, 72, 70, 26, 29, 63, 48, 94, 58, 9, 49, 79, 33, 63, 41, 
            13, 90, 37, 31, 3, 11, 54, 56, 72, 91, 97, 2, 83, 82, 6]]

"""###### **Exercise 1:**
find out the position of "Bugatti" in the `car_brands` list (whether it's the 3rd element, the 5th...).
"""

# your code here
bugatti_position = car_brands.index("Bugatti")+1
bugatti_position



"""###### **Exercise 2:**
remove "Apple" from the `car_brands` list.
"""

# your code here
car_brands.remove("Apple")
car_brands

"""###### **Exercise 3:**
order alphabetically the `car_brands` list.
"""

# your code here
car_brands.sort()
car_brands

"""###### **Exercise 4:**
there's a mistake in the list with fibonacci sequence, fix it.
"""

# your code here
fibonacci.pop(-3)
fibonacci.insert(10,55)
print(fibonacci)

"""###### **Exercise 5:**
order the `fibonacci` list descendingly.
"""

# your code here
fibonacci.sort(reverse = True)
print(fibonacci)

"""###### **Exercise 6:**
add "Hagrid" and "Dumbledore" to the first list inside the `characters` list.
"""

# your code here
characters[0].append("Hagrid")
characters[0].append("Dumbledore")
print(characters)

"""###### **Exercise 7:**
add the `sex_and_the_city` list in the `characters` list.
"""

# your code here
characters.append(sex_and_the_city)
characters

"""###### **Exercise 8:**
remove all elements from the `sex_and_the_city` list.
"""

# your code here
sex_and_the_city.clear()
sex_and_the_city

"""###### **Exercise 9:**
sum all elements in the `numbers` list.
"""

# your code here
sum_all_elements = sum(numbers[0])
#sum_all_elements
print ("The sum of all elements is", sum_all_elements)

"""###### **Exercise 10:**
find out how many times the number `77` appears in the `numbers` list.
"""

# your code here
repeat = numbers[0].count(77)
repeat

"""# Tuples and Sets

**Tuples** are almost exactly like lists, the only difference is that they're unmutable. You'll see what that means in a second. They are defined by regular parentheses `()` instead of square brackets `[]`:
"""

my_tuple = ("a", "b", "c", "d")
print(my_tuple)

"""Tuples are ordered. You can select items inside of a tuple by indexing with `[]`, just like lists:"""

my_tuple[2]

"""But you can not update the value of an element inside of a tuple. Trying to do so will result in a `TypeError`:


"""

my_tuple[2] = "e"

print(my_tuple[0])

"""**Sets** are collections of items, just like lists and tuples, but they have the following properties:

* They're not ordered.
* They're unchangeable.
* They cannot contain duplicate items.
"""

my_set = {1, 2, 3, 4}

"""If you try to include a duplicate into a set, it will simply not get stored:"""

my_fibonacci_set = {1, 1, 2, 3, 5}
print(my_fibonacci_set)

"""This characteristic makes them useful to extract unique values from other python collections. You can transform another collection into a set using the `set()` function:"""

# https://www.w3schools.com/python/ref_func_set.asp

price_list = [3.99, 2.5, 9.99, 1, 4.95, 
              3, 2.5, 6, 8, 1, 9.99, 4, 
              11.25, 14, 3.99, 4, 6, 1]
unique_prices = set(price_list)
#print(unique_prices)
unique_prices

print(
    "There are", len(price_list), "prices listed, but only",
    len(unique_prices), "unique price values."
    )

"""###### **Exercise 11:**
create a tuple with 10 elements and store it in a variable named `first_tuple`.
"""

# your code here
first_tuple = (0,1,2,3,4,5,5,4,3,2)
print(first_tuple)

"""###### **Exercise 12:**
using `[]`, select only the first 6 elements of the tuple you created and store them into a new variable named `second_tuple`.
"""

# your code here
second_tuple = first_tuple[:6]
second_tuple

"""###### **Exercise 13:**
convert the `second_tuple` into a set and store it in a variable called `first_set`.
"""

# your code here
first_set = set(second_tuple)
first_set

"""###### **Exercise 14:**
can you select the first element of the `first_set`?
"""

# your code here

"""###### **Exercise 15:** 
Below, you have a set with healthy ingredients and another one with vegan ingredients. Using [set methods you will find here](https://www.w3schools.com/python/python_ref_set.asp), print out a set with ingredients that are both healthy and vegan.
"""

healthy_food = {"apple", "salmon", "avocado", "seafood", "olive oil", "spinach", "yogurt"}
vegan_food = {"cookies", "apple", "avocado", "candy", "olive oil", "fake chiken", "spinach"}

# your code here
healthy_and_vegan = healthy_food.intersection(vegan_food)
print(healthy_and_vegan)